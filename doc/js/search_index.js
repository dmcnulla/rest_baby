var search_data = {"index":{"searchIndex":["logger","mockrestservice","object","pinchrestservice","restbaby","client","close()","delete()","get()","get_code()","new()","new()","new()","pause()","post()","print_last_response()","put()","request()","set_auth()","set_headers()","store_msg()","store_msg()","changelog","gemfile","gemfile.lock","license","readme","rakefile","created.rid","header_options.feature","print_response.feature","rest_client.feature","rest_baby.gemspec"],"longSearchIndex":["logger","mockrestservice","object","pinchrestservice","restbaby","restbaby::client","pinchrestservice#close()","restbaby::client#delete()","restbaby::client#get()","restbaby::client#get_code()","mockrestservice::new()","pinchrestservice::new()","restbaby::client::new()","object#pause()","restbaby::client#post()","restbaby::client#print_last_response()","restbaby::client#put()","restbaby::client#request()","restbaby::client#set_auth()","restbaby::client#set_headers()","mockrestservice#store_msg()","pinchrestservice#store_msg()","","","","","","","","","","",""],"info":[["Logger","","Logger.html","",""],["MockRestService","","MockRestService.html","",""],["Object","","Object.html","",""],["PinchRestService","","PinchRestService.html","",""],["RestBaby","","RestBaby.html","","<p>RestBaby is a small rest client. It encapsulates some of the details for\ncreating and using the rest …\n"],["RestBaby::Client","","RestBaby/Client.html","","<p>Sends and receives data to a restful web service\n"],["close","PinchRestService","PinchRestService.html#method-i-close","()",""],["delete","RestBaby::Client","RestBaby/Client.html#method-i-delete","(path, headers = {})","<p>Basic web services Delete command\n<p><code>url</code> = url to send the command to\n<p><code>headers</code> = header parameters including …\n"],["get","RestBaby::Client","RestBaby/Client.html#method-i-get","(path, headers = {})","<p>Basic web services Get command\n<p><code>url</code> = url to send the command to\n<p><code>headers</code> = header parameters including authorization …\n"],["get_code","RestBaby::Client","RestBaby/Client.html#method-i-get_code","()",""],["new","MockRestService","MockRestService.html#method-c-new","(host, port, protocol = STANDARD)",""],["new","PinchRestService","PinchRestService.html#method-c-new","(host, port)",""],["new","RestBaby::Client","RestBaby/Client.html#method-c-new","(url, headers = {})","<p>Creates a new rest client\n<p><code>url</code> = url of the rest service\n\n<p>eg. myrestservice.com:80/time\n"],["pause","Object","Object.html#method-i-pause","()",""],["post","RestBaby::Client","RestBaby/Client.html#method-i-post","(path, body = nil, headers = {})","<p>Basic web services Post command\n<p><code>url</code> = url to send the command to\n<p><code>body</code> = data to put in the body\n"],["print_last_response","RestBaby::Client","RestBaby/Client.html#method-i-print_last_response","()","<p>Pretty print the web services last response\n<p>The nice looking output is returned as a string\n"],["put","RestBaby::Client","RestBaby/Client.html#method-i-put","(path, body = nil, headers = {})","<p>Basic web services Put command\n<p><code>url</code> = url to send the command to\n<p><code>body</code> = data to put in the body\n"],["request","RestBaby::Client","RestBaby/Client.html#method-i-request","(uri, request, body = nil, headers)","<p>Sending the web services command\n<p><code>url</code> = url to send the command to\n<p><code>req</code> = command to send as Net::HTTP:&lt;command&gt; …\n"],["set_auth","RestBaby::Client","RestBaby/Client.html#method-i-set_auth","(user, password)","<p>Modifies the authentication for the rest client\n<p><code>user</code> = authorized username\n<p><code>password</code> = password for the …\n"],["set_headers","RestBaby::Client","RestBaby/Client.html#method-i-set_headers","(headers)","<p>Modifies the headers by merging new headers with current headers.\n<p><code>headers</code> = new headers to merge with …\n\n"],["store_msg","MockRestService","MockRestService.html#method-i-store_msg","(type, path, message, headers = {}, user = nil, password = nil)",""],["store_msg","PinchRestService","PinchRestService.html#method-i-store_msg","(path, message)",""],["ChangeLog","","ChangeLog.html","","<p>ChangeLog\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>gem &#39;cucumber&#39; gem &#39;fig_newton&#39; gem &#39;json&#39; gem\n&#39;pinch_hitter&#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  addressable (2.3.5)\n  builder (3.2.2)\n  crack (0.4.1)\n    safe_yaml ...</pre>\n"],["LICENSE","","LICENSE_txt.html","","<p>Copyright © 2013 Dave McNulla\n<p>MIT License\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p>rest_baby\n<p>Small rest client\n<p>Installation\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require &#39;rubygems&#39; require\n&#39;cucumber&#39; require &#39;cucumber/rake/task&#39; …\n"],["created.rid","","doc/created_rid.html","",""],["header_options.feature","","features/header_options_feature.html","","<p>Feature: Create a basic rest client that can get, put, post, and delete\n<p>@extended @get @headers Scenario: …\n"],["print_response.feature","","features/print_response_feature.html","","<p>Feature: Create a basic rest client that can get, put, post, and delete\n<p>@extended @get @print Scenario: …\n"],["rest_client.feature","","features/rest_client_feature.html","","<p>Feature: Create a basic rest client that can get, put, post, and delete\n<p>@core @get Scenario: client rest …\n"],["rest_baby.gemspec","","rest_baby_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}